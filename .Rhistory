)
),
tableOutput("data"))
)
)
)
)
server <- function(input, output){
output$plot1 <- renderPlot({
hist(
data[, char()],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
d[d$Summary == input$specie, ]
})
}
shinyApp(ui, server)
iris
View(iris)
View(iris)
str(iris)
server <- function(input, output){
output$plot1 <- renderPlot({
hist(
data[, input$var],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
d[d$Summary == input$specie, ]
})
}
shinyApp(ui, server)
shinyApp(ui, server)
names(d)
ui <- dashboardPage(
dashboardHeader(title = "Weather History"),
dashboardSidebar(
sidebarMenu(
menuItem("Diagram", tabName = "diagram"),
menuItem("View data", tabName = "Viewdata")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "diagram",
selectInput(
inputId = "var",
label = "Choice variable",
choices = c("Temperature", "Apparent Temperature", "Humidity", "Wind Speed", "Visibility", "Pressure millibars"),
selected = "Temperature"
),
titlePanel("Histogram"),
fluidRow(
column(
width = 12,
box(
width = "100%",
plotOutput('plot1')
)
)
)
),
tabItem(tabName = "Viewdata",
sidebarLayout(sidebarPanel(
selectInput(
inputId = "specie",
label = "Select the flower specie",
choices = unique(d$Summary),
selected = "Rain"
)
),
tableOutput("data"))
)
)
)
)
server <- function(input, output){
char = reactive({
switch(
input$var,
"Temperature" = "Temperature..C.",
"Apparent Temperature" = "Apparent.Temperature..C.",
"Humidity" = "Humidity",
"Wind Speed" = "Wind.Speed..km.h.",
"Visibility" = "Visibility..km.",
"Pressure millibars" = "Pressure..millibars."
)
})
output$plot1 <- renderPlot({
hist(
data[, input$var],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
d[d$Summary == input$specie, ]
})
}
shinyApp(ui, server)
server <- function(input, output){
char = reactive({
switch(
input$var,
"Temperature" = "Temperature..C.",
"Apparent Temperature" = "Apparent.Temperature..C.",
"Humidity" = "Humidity",
"Wind Speed" = "Wind.Speed..km.h.",
"Visibility" = "Visibility..km.",
"Pressure millibars" = "Pressure..millibars."
)
})
output$plot1 <- renderPlot({
hist(
data[, char()],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
d[d$Summary == input$specie, ]
})
}
shinyApp(ui, server)
server <- function(input, output){
char = reactive({
switch(
input$var,
"Temperature" = "Temperature..C.",
"Apparent Temperature" = "Apparent.Temperature..C.",
"Humidity" = "Humidity",
"Wind Speed" = "Wind.Speed..km.h.",
"Visibility" = "Visibility..km.",
"Pressure millibars" = "Pressure..millibars."
)
})
output$plot1 <- renderPlot({
hist(
d[, char()],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
d[d$Summary == input$specie, ]
})
}
server <- function(input, output){
char = reactive({
switch(
input$var,
"Temperature" = "Temperature..C.",
"Apparent Temperature" = "Apparent.Temperature..C.",
"Humidity" = "Humidity",
"Wind Speed" = "Wind.Speed..km.h.",
"Visibility" = "Visibility..km.",
"Pressure millibars" = "Pressure..millibars."
)
})
output$plot1 <- renderPlot({
hist(
d[, char()],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
d[d$Summary == input$specie, ]
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Weather History"),
dashboardSidebar(
sidebarMenu(
menuItem("Diagram", tabName = "diagram"),
menuItem("View data", tabName = "Viewdata")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "diagram",
selectInput(
inputId = "var",
label = "Choice variable",
choices = c("Temperature", "Apparent Temperature", "Humidity", "Wind Speed", "Visibility", "Pressure millibars"),
selected = "Temperature"
),
titlePanel("Histogram"),
fluidRow(
column(
width = 12,
box(
width = "100%",
plotOutput('plot1')
)
)
),
fluidRow(
tabsetPanel(
tabPanel("Summary", verbatimTextOutput("mysummary")),
tabPanel("Boxplot", plotOutput("myplot"))
)
)
),
tabItem(tabName = "Viewdata",
sidebarLayout(sidebarPanel(
selectInput(
inputId = "specie",
label = "Select the flower specie",
choices = unique(d$Summary),
selected = "Rain"
)
),
tableOutput("data"))
)
)
)
)
server <- function(input, output){
char = reactive({
switch(
input$var,
"Temperature" = "Temperature..C.",
"Apparent Temperature" = "Apparent.Temperature..C.",
"Humidity" = "Humidity",
"Wind Speed" = "Wind.Speed..km.h.",
"Visibility" = "Visibility..km.",
"Pressure millibars" = "Pressure..millibars."
)
})
output$plot1 <- renderPlot({
hist(
d[, char()],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
d[d$Summary == input$specie, ]
})
output$mysummary = renderPrint({
summary(d[, char()])
})
output$myplot  = renderPlot({
boxplot(d[, char()], main = "Boxplot")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Weather History"),
dashboardSidebar(
sidebarMenu(
menuItem("Diagram", tabName = "diagram"),
menuItem("View data", tabName = "Viewdata")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "diagram",
selectInput(
inputId = "var",
label = "Choice variable",
choices = c("Temperature", "Apparent Temperature", "Humidity", "Wind Speed", "Visibility", "Pressure millibars"),
selected = "Temperature"
),
titlePanel("Histogram"),
fluidRow(
column(
width = 12,
box(
width = "100%",
plotOutput('plot1')
)
)
),
fluidRow(
tabsetPanel(
tabPanel("Summary", verbatimTextOutput("mysummary")),
tabPanel("Boxplot", plotOutput("myplot"))
)
)
),
tabItem(tabName = "Viewdata",
sidebarLayout(sidebarPanel(
selectInput(
inputId = "specie",
label = "Select the Summary",
choices = unique(d$Summary),
selected = "Rain"
)
),
tableOutput("data"))
)
)
)
)
shinyApp(ui, server)
shiny::runApp()
library(ggplot2)
library(dplyr)
library(tidyr)
library(shiny)
library(shinydashboard)
runApp()
library(dplyr)
library(ggplot2)
library(readxl)
d <- read.csv("D:/C/ChuyenDe5-R/Dataset/weatherHistory.csv")
data<-d
str(data)
names(d)
colnames(data) <- c("date", "summany", "type", "temp", "atemp", "humidity", "wind", "windb", "vision", "loud", "pressure", "daily")
tablename = c("temp", "atemp", "humidity", "wind", "vision", "pressure")
#danh sách biến phụ thuộc
response_variable_list = c("wind","vision","windb","pressure")
#danh sách biến độc lập
predictor_variable_list = c("temp","humidity")
runApp()
#danh sách biến phụ thuộc
response_variable_list = c("wind","vision","windb","humidity")
#danh sách biến độc lập
predictor_variable_list = c("temp","humidity")
#danh sách biến độc lập
predictor_variable_list = c("temp","humidity")
#danh sách biến phụ thuộc
response_variable_list = c("wind","vision","windb","humidity")
#danh sách biến độc lập
predictor_variable_list = c("temp","humidity")
runApp()
summary(input$response_variable ~ input$predictor_variable)
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(dplyr)
library(tidyr)
library(shiny)
library(shinydashboard)
server <- function(input, output){
char = reactive({
switch(
input$var,
"Temperature" = "Temperature..C.",
"Apparent Temperature" = "Apparent.Temperature..C.",
"Humidity" = "Humidity",
"Wind Speed" = "Wind.Speed..km.h.",
"Visibility" = "Visibility..km.",
"Pressure millibars" = "Pressure..millibars."
)
})
output$plot1 <- renderPlot({
hist(
d[, char()],
xlab = input$var,
main = paste("Histogram of", input$var)
)
})
output$data = renderTable({
req(input$silder_temp)
if(input$summary!='All' && input$precip_type!='All' ){
filter(d,d$Summary == input$summary & d$Precip.Type == input$precip_type & d$Temperature..C.>= as.numeric(input$silder_temp[1]) & d$Temperature..C.<= as.numeric(input$silder_temp[2]) )
}
else if(input$precip_type!='All'){
d[d$Precip.Type == input$precip_type & d$Temperature..C.>= as.numeric(input$silder_temp[1]) & d$Temperature..C.<= as.numeric(input$silder_temp[2]),]
}
else if(input$summary!='All'){
filter(d,d$Summary == input$summary & d$Temperature..C.>= as.numeric(input$silder_temp[1]) & d$Temperature..C.<= as.numeric(input$silder_temp[2]))
}
else{
d[ d$Temperature..C.>= as.numeric(input$silder_temp[1]) & d$Temperature..C.<= as.numeric(input$silder_temp[2]),]
}
})
output$mysummary = renderPrint({
summary(d[, char()])
})
output$myplot  = renderPlot({
boxplot(d[, char()], main = "Boxplot")
})
output$chart = renderPlot(
{
ggplot(data,
mapping = aes(x = .data[[input$xcol]],y = .data[[input$ycol]])
)+ geom_point() +xlab(input$xcol)+ylab(input$ycol)
})
output$liner_regression = renderPlot({
ggplot(data,
mapping = aes(x = .data[[input$predictor_variable]],y = .data[[input$response_variable]])
)+geom_point()+geom_smooth(formula = y~x, method = "lm")
#ggplot(data, mapping = aes(x = input$predictor_variable,y = input$response_variable))+geom_point()+geom_smooth("lm")
#+abline(lm(data = data , input$response_variable ~ input$predictor_variable))
})
model_lm <- reactive({
req(input$response_variable)
req(input$predictor_variable)
})
output$summary_linear_regression = renderPrint({
print(input$predictor_variable)
lm(reformulate(input$response_variable, input$predictor_variable), data = data)
})
}
runApp()
ui <- dashboardPage(
dashboardHeader(title = "Weather History"),
dashboardSidebar(
sidebarMenu(
menuItem("Diagram", tabName = "diagram"),
menuItem("View data", tabName = "Viewdata"),
menuItem("Chart", tabName = "Chart"),
menuItem("Linear Regression Model", tabName = "LinearRegressionModel")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "diagram",
selectInput(
inputId = "var",
label = "Choice variable",
choices = c("Temperature", "Apparent Temperature", "Humidity", "Wind Speed", "Visibility", "Pressure millibars"),
selected = "Temperature"
),
titlePanel("Histogram"),
fluidRow(
column(
width = 12,
box(
width = "100%",
plotOutput('plot1')
)
)
),
fluidRow(
tabsetPanel(
tabPanel("Summary", verbatimTextOutput("mysummary")),
tabPanel("Boxplot", plotOutput("myplot"))
)
)
),
tabItem(tabName = "Viewdata",
fluidRow(
box(selectInput(
inputId = "summary",
label = "Select the Summary",
choices = c("All",unique(d$Summary)),
selected = "All"
)),
box(selectInput(
inputId = "precip_type",
label = "Select the Precip Type",
choices = c("All",unique(d$Precip.Type)),
selected = "All"
))
),
fluidRow(
box(sliderInput(
inputId = "silder_temp",
label = "Temperature",
min = min(data$temp),
max = max(data$temp),
value = c(min(data$temp),max(data$temp))
))
),
tableOutput("data")
),
tabItem(tabName = "Chart",
fluidRow(
box(selectInput(inputId =  'xcol',
label = 'X variable',
choices =  tablename,
selected = tablename[[1]])),
box(selectInput(inputId = 'ycol',
label =  'Y variable',
choices =  tablename,
selected = tablename[[3]]))
),
plotOutput('chart')
),
tabItem(tabName = "LinearRegressionModel",
fluidRow(
box(selectInput(inputId =  'response_variable',
label = 'Response Variable',
choices =  response_variable_list,
selected = response_variable_list[1])),
box(selectInput(inputId = 'predictor_variable',
label =  'Predictor Variable',
choices =  predictor_variable_list,
selected = predictor_variable_list[[1]]))
),
fluidRow(
plotOutput('liner_regression')
),
fluidRow(
tabsetPanel(
tabPanel("Summary", verbatimTextOutput("summary_linear_regression")),
)
)
)
)
)
)
runApp()
